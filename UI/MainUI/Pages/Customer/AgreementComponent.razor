@page "/agreement/{CustomerId:int?}"

@using SabaRayane.Contract.Dtos.Customers.Agreements
@using SabaRayane.Contract.Dtos.s.Customers
@using Taran.Shared.Dtos.Languages
@using Taran.Shared.UI.Components.CustomizedQuickGrid
@using Taran.Shared.UI.Components.CustomizedQuickGrid.Columns
@using Taran.UI.Main.Services.CustomerServices
@using Taran.UI.Main.Services.ProductServices

@inject ICustomerService customerService;
@inject IProductService productService;

@if(CustomerId is not null)
{
    <div class="mb-2">
        <a class="btn btn-warning text-black" href="/customer">
            <span class="far fa-hand-point-right"></span>
            @translator.Translate(nameof(KeyWords.Return))
        </a>

        <span class="ms-3">
            @customer?.FullName
        </span>
    </div>
}

<QuickGrid Id="AgreementGrid" ItemsProvider="@GridItemsProvider" TGridItem="SearchAgreementResponseDto" Pagination="@pagination" @ref="grid" OnSaveEdit="SaveInlineEdit" EditingObjectType="typeof(UpdateAgreementRequestDto)" OnSaveNew="SaveInlineCreate" CreatingObjectType="typeof(CreateAgreementRequestDto)" OnDelete="OnItemDelete" Class="table table-borderless" Theme="none">
    <PropertyColumn Title="@translator.Translate(nameof(KeyWords.Price))" Property="@(c => c.Price)">
    </PropertyColumn>
    <PropertyColumn Title="@translator.Translate(nameof(KeyWords.AgreementDate))" Property="@(c => c.AgreementDate)"
                    EditTemplate="new EditTemplate(nameof(SearchAgreementResponseDto.AgreementDate))">
    </PropertyColumn>
    <PropertyColumn Title="@translator.Translate(nameof(KeyWords.DurationInMonths))" Property="@(c => c.DurationInMonths)"
                    EditTemplate="new EditTemplate(nameof(SearchAgreementResponseDto.DurationInMonths))">
    </PropertyColumn>
    <PropertyColumn Title="@translator.Translate(nameof(KeyWords.ExtraUsersCount))" Property="@(c => c.ExtraUsersCount)"
                    EditTemplate="new EditTemplate(nameof(SearchAgreementResponseDto.ExtraUsersCount))">
    </PropertyColumn>
    <PropertyColumn Title="@translator.Translate(nameof(KeyWords.Product))" Property="@(c => c.ProductName)"
                    EditTemplate="new EditTemplate(nameof(SearchAgreementResponseDto.ProductId), ProductDropDownItems)">
    </PropertyColumn>
    @if (CustomerId is null)
    {
        <PropertyColumn Title="@translator.Translate(nameof(KeyWords.Customer))" Property="@(c => c.CustomerName)"
            EditTemplate="new EditTemplate(nameof(SearchAgreementResponseDto.CustomerId), CustomerDropDownItems)">
        </PropertyColumn>
    }
</QuickGrid>

<div class="row bg-default">
    <div class="col-8">
        <Paginator State="@pagination" />
    </div>
    <div class="col-4">
        <div class="d-inline float-end me-5">
            @translator.Translate(nameof(KeyWords.ItemsPerPage))
            <select @bind="@pagination.ItemsPerPage">
                <option>10</option>
                <option>15</option>
                <option>20</option>
            </select>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? CustomerId { get; set; }

    QuickGrid<SearchAgreementResponseDto>? grid;
    GridItemsProvider<SearchAgreementResponseDto>? GridItemsProvider;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    SearchAgreementRequestDto searchRequest = new();

    List<(int, string)> ProductDropDownItems = new();
    List<(int, string)> CustomerDropDownItems = new();

    SearchCustomerResponseDto? customer;

    protected override async Task OnInitializedAsync()
    {
        ProductDropDownItems = await productService.GetProductDropDownItems(0, 1000, "");
        CustomerDropDownItems = await customerService.GetCustomerDropDownItems(0, 1000, "");

        if (CustomerId is not null)
        {
            grid?.AddDefaultValue(nameof(SearchAgreementResponseDto.CustomerId), CustomerId);

            var customers = await customerService.SearchCustomer(new SearchCustomerRequestDto()
                {
                    CustomerId = CustomerId,
                    Skip = 0,
                    Take = 1,
                });
            customer = customers?.Data?.Results.FirstOrDefault();
        }

        GridItemsProvider = async req =>
        {
            searchRequest.Skip = req.StartIndex;
            searchRequest.Take = req.Count ?? 10;
            searchRequest.CustomerId = CustomerId;

            var customersResponse = await customerService.SearchAgreement(searchRequest);

            return GridItemsProviderResult.From(
                items: customersResponse.Data!.Results,
                totalItemCount: customersResponse.Data.TotalCount);
        };
    }

    protected bool IsCustomerDropDownEnable(object editCreateObject)
    {
        return CustomerId is null;
    }

    protected async Task FilterChanged()
    {
        await grid!.RefreshDataAsync();
    }

    protected async Task<GridItemEditResult> OnItemDelete(SearchAgreementResponseDto item)
    {
        var result = await customerService.DeleteAgreement(item.Id);
        return new GridItemEditResult { Success = result.Success, ErrorMessage = result.ErrorMessage };
    }

    protected async Task<GridItemEditResult> SaveInlineEdit(object updateRequestDto)
    {
        var result = await customerService.UpdateAgreement((UpdateAgreementRequestDto)updateRequestDto);
        return new GridItemEditResult { Success = result.Success, ErrorMessage = result.ErrorMessage };
    }

    protected async Task<GridItemEditResult> SaveInlineCreate(object createRequestDto)
    {
        var request = (CreateAgreementRequestDto)createRequestDto;
        var result = await customerService.CreateAgreement(request);
        return new GridItemEditResult { Success = result.Success, ErrorMessage = result.ErrorMessage };
    }
}

