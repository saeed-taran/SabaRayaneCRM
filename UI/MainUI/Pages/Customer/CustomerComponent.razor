@page "/customer"

@using SabaRayane.Contract.Dtos.s.Customers
@using Taran.Shared.Dtos.Languages
@using Taran.Shared.Language
@using Taran.Shared.Languages
@using Taran.Shared.UI.Components.Bootstrap.Modal
@using Taran.Shared.UI.Components.CustomizedQuickGrid
@using Taran.Shared.UI.Components.CustomizedQuickGrid.Columns
@using Taran.Shared.UI.Components.ImportResult
@using Taran.UI.Main.Services.CustomerServices

@inject ICustomerService customerService;


<div class="border-bottom pb-3 pt-2 opacityBg">
    <a class="btn btn-sm ms-2 border text-dark" href="@customerService.GetCustomerImportTemplateDownloadLink()">
        <i class="fas fa-table text-primary"></i>
        @translator.Translate(nameof(KeyWords.DownloadImportFileTemplate))
    </a>

    <InputFile OnChange=FileSelected accept=".xlsx" class="ms-4" />

    <button @onclick=ImportFile class="btn btn-sm ms-2 border text-dark">
        <i class="fas fa-upload text-dark"></i>
        @translator.Translate(nameof(KeyWords.Import))
    </button>
</div>
<hr />

<QuickGrid Id="CustomerGrid" ItemsProvider="@GridItemsProvider" TGridItem="SearchCustomerResponseDto" Pagination="@pagination" @ref="grid" OnSaveEdit="SaveInlineEdit" EditingObjectType="typeof(UpdateCustomerRequestDto)" 
    OnSaveNew="SaveInlineCreate" CreatingObjectType="typeof(CreateCustomerRequestDto)" OnDelete="OnItemDelete" Class="table table-borderless" Theme="none"
    CustomeActions="customeActions"
>
    <PropertyColumn Title="@translator.Translate(nameof(KeyWords.CustomerId))" Property="@(c => c.CustomerId)"
            EditTemplate="new EditTemplate(nameof(SearchCustomerResponseDto.CustomerId))">
    </PropertyColumn>
    <PropertyColumn Title="@translator.Translate(nameof(KeyWords.FirstName))" Property="@(c => c.FirstName)"
            EditTemplate="new EditTemplate(nameof(SearchCustomerResponseDto.FirstName))">
    </PropertyColumn>
    <PropertyColumn Title="@translator.Translate(nameof(KeyWords.LastName))" Property="@(c => c.LastName)"
            EditTemplate="new EditTemplate(nameof(SearchCustomerResponseDto.LastName))">
    </PropertyColumn>
    <PropertyColumn Title="@translator.Translate(nameof(KeyWords.StoreName))" Property="@(c => c.StoreName)"
            EditTemplate="new EditTemplate(nameof(SearchCustomerResponseDto.StoreName))">
    </PropertyColumn>
    <PropertyColumn Title="@translator.Translate(nameof(KeyWords.MobileNumber))" Property="@(c => c.MobileNumber)"
            EditTemplate="new EditTemplate(nameof(SearchCustomerResponseDto.MobileNumber))">
    </PropertyColumn>
    <PropertyColumn Title="@translator.Translate(nameof(KeyWords.Description))" Property="@(c => c.Description)"
            EditTemplate="new EditTemplate(nameof(SearchCustomerResponseDto.Description))">
    </PropertyColumn>
</QuickGrid>

<div class="row bg-default">
    <div class="col-8">
        <Paginator State="@pagination" />
    </div>
    <div class="col-4">
        <div class="d-inline float-end me-5">
            @translator.Translate(nameof(KeyWords.ItemsPerPage))
            <select @bind="@pagination.ItemsPerPage">
                <option>10</option>
                <option>15</option>
                <option>20</option>
            </select>
        </div>
    </div>
</div>

<BootstrapModal Id="ImportReportModal" BooststrapModalSize="BooststrapModalSize.lg" @ref=ImportReportModal>
    <Body>
        <ImportResultViewer @ref=importResultViewer></ImportResultViewer>
    </Body>
</BootstrapModal>

@code {
    QuickGrid<SearchCustomerResponseDto>? grid;
    GridItemsProvider<SearchCustomerResponseDto>? GridItemsProvider;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    SearchCustomerRequestDto searchRequest = new();

    List<CustomeAction<SearchCustomerResponseDto>> customeActions = [];

    IBrowserFile? selectedFile;

    BootstrapModal ImportReportModal;
    ImportResultViewer importResultViewer;

    protected override async Task OnInitializedAsync()
    {
        customeActions.Add(new CustomeAction<SearchCustomerResponseDto>(ViewAgreementsClicked, "far fa-handshake"));

        GridItemsProvider = async req =>
        {
            searchRequest.Skip = req.StartIndex;
            searchRequest.Take = req.Count ?? 10;

            var customersResponse = await customerService.SearchCustomer(searchRequest);

            return GridItemsProviderResult.From(
                items: customersResponse.Data!.Results,
                totalItemCount: customersResponse.Data.TotalCount);
        };
    }

    protected async Task ViewAgreementsClicked(SearchCustomerResponseDto item)
    {
        navigationManager.NavigateTo($"/agreement/{item.Id}");
    }

    protected async Task FileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    protected async Task FilterChanged()
    {
        await grid!.RefreshDataAsync();
    }

    protected async Task<GridItemEditResult> OnItemDelete(SearchCustomerResponseDto item)
    {
        var result = await customerService.DeleteCustomer(item.Id);
        return new GridItemEditResult { Success = result.Success, ErrorMessage = result.ErrorMessage };
    }

    protected async Task<GridItemEditResult> SaveInlineEdit(object updateRequestDto)
    {
        var result = await customerService.UpdateCustomer((UpdateCustomerRequestDto)updateRequestDto);
        return new GridItemEditResult { Success = result.Success, ErrorMessage = result.ErrorMessage };
    }

    protected async Task<GridItemEditResult> SaveInlineCreate(object createRequestDto)
    {
        var request = (CreateCustomerRequestDto)createRequestDto;
        var result = await customerService.CreateCustomer(request);
        return new GridItemEditResult { Success = result.Success, ErrorMessage = result.ErrorMessage };
    }

    protected async Task ImportFile()
    {
        if (selectedFile is null)
        {
            await toastService.Show(translator.Translate(nameof(KeyWords.PleaseSelectAFileToImport)), ToastKind.danger);
            return;
        }

        var response = await customerService.ImportCustomer(selectedFile);
        if (response.Success)
        {
            if (response.Data.Error > 0)
            {
                importResultViewer.Refresh(response.Data);
                await ImportReportModal.Open();
            }
            else
            {
                await toastService.Show(translator.Translate(nameof(KeyWords.OperationDoneSuccessfully)), ToastKind.success);
            }

            await grid!.RefreshDataAsync();
        }
        else if (!string.IsNullOrWhiteSpace(response.ErrorMessage))
        {
            await toastService.Show(response.ErrorMessage, ToastKind.danger);
        }
    }
}